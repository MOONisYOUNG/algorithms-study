# 0-1. 시간 제한 1초, 메모리 제한 512 MB
# 0-2. 메모리, 시간 모두 넉넉한 편이므로 재귀 방식으로 풀어도 된다.
# 0-3. 재귀 기반의 백트래킹 방식으로 풀이한다.
# 1. 재귀함수 작업을 위해 사용할 s라는 리스트를 정의한다.
# 2. 재귀함수 내부에서 for 반복문을 1 ~ N 범위까지 돌려준다. (변화 값 : i)
    # 2-1. 반복문을 돌렸을 때, i가 s 안에 없으면 i를 넣어준다.
    # 2-2. 재귀함수를 실현하기 위해, 실행 함수를 다시 호출한다.
    # 2-3. 탐색 완료한 숫자를 제거하기 위해 s에서 빼줘야 한다. s.pop()을 연산한다.
# 3. 재귀함수 종료조건으로 len(s) == m을 만들어 준다.
    # 3-1. 재귀함수 종료조건을 만족하면 ' '.join(map(str, s))를 사용해서 answer 한 줄을 연산한다.
    # 3-2. return은 필수이다.

N, M = map(int, input().split())

s = []

def dfs():
    if len(s) == M:
        print(' '.join(map(str, s)))
        return
    
    for i in range(1, N+1):
        if i not in s:
            s.append(i)
            dfs()
            s.pop()
            
dfs()